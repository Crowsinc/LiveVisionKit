//NOTE: need to use modified version for compatibility
#include "ffx_a_mod.h"

//=====================================================================================
//		OBS Parameters & Callbacks
//=====================================================================================

uniform float4x4 ViewProj;
uniform texture2d image; 

//=====================================================================================
//		FSR Parameters & Callbacks
//=====================================================================================

// NOTE: We use AF* instead of the original FSR AU*
// uniforms as these aren't supported in the HLSL-GLSL
// conversion performed by OBS. See modified FSR files
// for more information on unsupported functionality. 
uniform AF2 output_size;
uniform AF4 easu_const_0;
uniform AF4 easu_const_1;
uniform AF4 easu_const_2;
uniform AF4 easu_const_3;
uniform AF4 rcas_const_0;

sampler_state LinearSampler 
{
    Filter      = Linear; 
    AddressU    = Clamp;
    AddressV    = Clamp;
};


sampler_state PointSampler 
{
    Filter      = Point; 
    AddressU    = Clamp;
    AddressV    = Clamp;
};

AF4 FsrEasuRF(AF2 p)
{
    // Four texel gather operations such as GatherRed (HLSL) or textureGather.r (GLSL)
    // are not supported by OBS So we are forced to mimic this functionality.
    
    return AF4(
        image.Sample(PointSampler, (AF2(p) + AF2(0, 0)) / AF2(1280, 720)).r,
        image.Sample(PointSampler, (AF2(p) + AF2(1, 0)) / AF2(1280, 720)).r,
        image.Sample(PointSampler, (AF2(p) + AF2(0, 1)) / AF2(1280, 720)).r,
        image.Sample(PointSampler, (AF2(p) + AF2(1, 1)) / AF2(1280, 720)).r
    );
}

AF4 FsrEasuGF(AF2 p)
{
    // Four texel gather operations such as GatherGreen (HLSL) or textureGather.g (GLSL)
    // are not supported by OBS So we are forced to mimic this functionality.
    return AF4(
        image.Sample(PointSampler, (AF2(p) + AF2(0, 0)) / AF2(1280, 720)).g,
        image.Sample(PointSampler, (AF2(p) + AF2(1, 0)) / AF2(1280, 720)).g,
        image.Sample(PointSampler, (AF2(p) + AF2(0, 1)) / AF2(1280, 720)).g,
        image.Sample(PointSampler, (AF2(p) + AF2(1, 1)) / AF2(1280, 720)).g
    );
}

AF4 FsrEasuBF(AF2 p)
{
    // Four texel gather operations such as GatherBlue (HLSL) or textureGather.b (GLSL)
    // are not supported by OBS So we are forced to mimic this functionality.
    return AF4(
        image.Sample(PointSampler, (AF2(p) + AF2(0, 0)) / AF2(1280, 720)).b,
        image.Sample(PointSampler, (AF2(p) + AF2(1, 0)) / AF2(1280, 720)).b,
        image.Sample(PointSampler, (AF2(p) + AF2(0, 1)) / AF2(1280, 720)).b,
        image.Sample(PointSampler, (AF2(p) + AF2(1, 1)) / AF2(1280, 720)).b
    );
}

AF4 FsrRcasLoadF(ASU2 p)
{   
    // Texel gather operations such as .Load (HLSL( or texelFetch (GLSL)
    // are not supported by the OBS HLSL-GLSL converter So we are forced to mimic this functionality.
    return image.Sample(PointSampler, AF2(p) / output_size);
}

void FsrRcasInputF(inout AF1 r, inout AF1 g, inout AF1 b)
{
    // NOT USED
}

//NOTE: need to use modified version for compatibility
#include "ffx_fsr1_mod.h"

//=====================================================================================
//		VERTEX SHADER
//=====================================================================================

struct VSData 
{
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VSData VSMain(VSData vs_in)
{
    VSData vs_out;
    vs_out.pos = mul(float4(vs_in.pos.xyz, 1.0), ViewProj);
    vs_out.uv  = vs_in.uv;
    return vs_out;
}

//=====================================================================================
//		PIXEL SHADER
//=====================================================================================

float4 PSMain(VSData vs_in) : TARGET
{
    AF3 out_col = AF3(0, 0, 0);
    AF2 out_pos = vs_in.uv * output_size.xy;

    FsrEasuF(out_col, out_pos, easu_const_0, easu_const_1, easu_const_2, easu_const_3);
   
    //FsrRcasF(out_col.r, out_col.g, out_col.b, out_pos, rcas_const_0);

//  AF4 a = float4(out_col, 1.0);
//  a.r = FsrEasuRF(out_pos).r;
//  a.g = FsrEasuGF(out_pos).r;
//  a.b = FsrEasuBF(out_pos).r;
//  return a;
    return float4(out_col, 1.0);
  // return float4(image.Sample(LinearSampler, vs_in.uv).r, 0, .5, 1);
}

//=====================================================================================
//		TECHNIQUES
//=====================================================================================

technique Draw
{
    pass
    {
        vertex_shader = VSMain(vs_in);
        pixel_shader  = PSMain(vs_in);
    }
};