
#include "ffx_a_pruned.h"

// FSR Parameters
uniform AU4 easu_const_0;
uniform AU4 easu_const_1;
uniform AU4 easu_const_2;
uniform AU4 easu_const_3;
uniform AU4 rcas_const_0;

// OBS Parameters
uniform float4x4 ViewProj;
uniform texture2d image; 

//TODO: include and define callbacks
//#include "ffx_fsr1.h"

// TODO: re-write everything below

sampler_state defaultSampler {
        Filter      = Linear;
        AddressU    = Border;
        AddressV    = Border;
        BorderColor = 7FFF0000;
};

struct VertInOut {
    float4 pos : POSITION;
    float2 uv : TEXCOORD0;
};

VertInOut VertextShaderMain(VertInOut vert_in)
{
    VertInOut vert_out;
    vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv  = vert_in.uv;
    return vert_out;
}

float4 PixelShaderMain(VertInOut vert_in) : TARGET
{
    return image.Sample(defaultSampler, vert_in.uv) * 2;
}

technique Draw
{
    pass
    {
            vertex_shader =  VertextShaderMain(vert_in);
            pixel_shader  = PixelShaderMain(vert_in);
    }
};