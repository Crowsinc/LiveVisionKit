//NOTE: need to use pruned version for compatibility
#include "ffx_a_pruned.h"

//=====================================================================================
//		OBS Parameters & Callbacks
//=====================================================================================

uniform float4x4 ViewProj;
uniform texture2d image; 

//=====================================================================================
//		FSR Parameters & Callbacks
//=====================================================================================

uniform AU2 output_size;
uniform AU4 easu_const_0;
uniform AU4 easu_const_1;
uniform AU4 easu_const_2;
uniform AU4 easu_const_3;
uniform AU4 rcas_const_0;

sampler_state Sampler 
{
    Filter      = Linear; //TODO: mess with different types (point?)
    AddressU    = Clamp;
    AddressV    = Clamp;
};

AF4 FsrEasuRF(AF2 p)
{
    return image.GatherRed(Sampler, p);
}

AF4 FsrEasuGF(AF2 p)
{
    return image.GatherGreen(Sampler, p);
}

AF4 FsrEasuBF(AF2 p)
{
    return image.GatherBlue(Sampler, p);
}

//NOTE: need to use pruned version for compatibility
#include "ffx_fsr1_pruned.h"

//=====================================================================================
//		VERTEX SHADER
//=====================================================================================

struct VSData 
{
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VSData VSMain(VSData vs_in)
{
    VSData vs_out;
    vs_out.pos = mul(float4(vs_in.pos.xyz, 1.0), ViewProj);
    vs_out.uv  = vs_in.uv;
    return vs_out;
}

//=====================================================================================
//		PIXEL SHADER
//=====================================================================================

float4 PSMain(VSData vs_in) : TARGET
{
    float3 out_col = float3(0, 0, 0);
    float2 out_pos = vs_in.uv * output_size.xy;

    FsrEasuF(out_col, out_pos, easu_const_0, easu_const_1, easu_const_2, easu_const_3);
    
  //  return float4(out_col, 1.0);
    return float4(image.Sample(Sampler, vs_in.uv).r, 0, .5, 1);
}

//=====================================================================================
//		TECHNIQUES
//=====================================================================================

technique Draw
{
    pass
    {
        vertex_shader = VSMain(vs_in);
        pixel_shader  = PSMain(vs_in);
    }
};