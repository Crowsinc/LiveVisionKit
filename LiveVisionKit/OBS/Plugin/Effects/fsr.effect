//    *************************** LiveVisionKit ****************************
//    Copyright (C) 2022  Sebastian Di Marco (crowsinc.dev@gmail.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
// 	  **********************************************************************

#include "ffx_a_mod.h"

uniform float4x4 ViewProj;
uniform texture2d image; 

uniform AF2 output_size;
uniform AF4 easu_const_0;
uniform AF4 easu_const_1;
uniform AF4 easu_const_2;
uniform AF4 easu_const_3;
uniform AF4 rcas_const_0;

sampler_state LinearSampler 
{
    Filter      = Linear; 
    AddressU    = Clamp;
    AddressV    = Clamp;
};

sampler_state PointSampler 
{
    Filter      = Point; 
    AddressU    = Clamp;
    AddressV    = Clamp;
};

// The textureGather (GLSL 400) and Gather*** (HLSL 5+) functions which are ideally
// required for these functions are not supported. So we instead mimic the functionality 
// by using point sampling.  
//
// For a given point p in normalized texture coordinates. We want to grab neighbouring
// texels x, y, z, and w in the listed order.
//
//                                  +---+---+
//                                  | w | z |
//                                  +--(p)--+
//                                  | x | y |
//                                  +---+---+
//
// To get the normalized texture coordinates for each required texel, we offset 
// point p by half the texel size using addition/subtraction as necessary.
AF4 FsrEasuRF(AF2 p)
{
    AF2 half_texel_size = AF2_(0.5) / output_size;
    return AF4(
        image.Sample(PointSampler, AF2(p.x - half_texel_size.x, p.y + half_texel_size.y)).r,
        image.Sample(PointSampler, AF2(p.x + half_texel_size.x, p.y + half_texel_size.y)).r,
        image.Sample(PointSampler, AF2(p.x + half_texel_size.x, p.y - half_texel_size.y)).r,
        image.Sample(PointSampler, AF2(p.x - half_texel_size.x, p.y - half_texel_size.y)).r
    );
}

AF4 FsrEasuGF(AF2 p)
{
    AF2 half_texel_size = AF2_(0.5) / output_size;
    return AF4(
        image.Sample(PointSampler, AF2(p.x - half_texel_size.x, p.y + half_texel_size.y)).g,
        image.Sample(PointSampler, AF2(p.x + half_texel_size.x, p.y + half_texel_size.y)).g,
        image.Sample(PointSampler, AF2(p.x + half_texel_size.x, p.y - half_texel_size.y)).g,
        image.Sample(PointSampler, AF2(p.x - half_texel_size.x, p.y - half_texel_size.y)).g
    );
}

AF4 FsrEasuBF(AF2 p)
{
    AF2 half_texel_size = AF2_(0.5) / output_size;
    return AF4(
        image.Sample(PointSampler, AF2(p.x - half_texel_size.x, p.y + half_texel_size.y)).b,
        image.Sample(PointSampler, AF2(p.x + half_texel_size.x, p.y + half_texel_size.y)).b,
        image.Sample(PointSampler, AF2(p.x + half_texel_size.x, p.y - half_texel_size.y)).b,
        image.Sample(PointSampler, AF2(p.x - half_texel_size.x, p.y - half_texel_size.y)).b
    );
}

AF4 FsrRcasLoadF(ASU2 p)
{   
#ifdef _OPENGL
    return texelFetch(image, p, 0);
#else
    return image.Load(ASU3(p, 0));
#endif
}

void FsrRcasInputF(inout AF1 r, inout AF1 g, inout AF1 b)
{
    // NOT USED
}

#include "ffx_fsr1_mod.h"

struct VSData 
{
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VSData VSMain(VSData vs_in)
{
    VSData vs_out;
    vs_out.pos = mul(float4(vs_in.pos.xyz, 1.0), ViewProj);
    vs_out.uv  = vs_in.uv;
    return vs_out;
}

float4 PSEASUMain(VSData vs_in) : TARGET
{
    AF3 out_col = AF3(0, 0, 0);
    AF2 out_pos = floor(vs_in.uv * output_size.xy); 

    FsrEasuF(out_col, out_pos, easu_const_0, easu_const_1, easu_const_2, easu_const_3);

    return float4(out_col, 1.0);
}

float4 PSRCASMain(VSData vs_in) : TARGET
{
    AF3 out_col = AF3(0, 0, 0);
    AF2 out_pos = floor(vs_in.uv * output_size.xy);
   
    FsrRcasF(out_col.r, out_col.g, out_col.b, out_pos, rcas_const_0);

    return float4(out_col, 1.0);
}

technique EASU
{
    pass
    {
        vertex_shader = VSMain(vs_in);
        pixel_shader  = PSEASUMain(vs_in);
    }
};

technique RCAS
{
    pass
    {
        vertex_shader = VSMain(vs_in);
        pixel_shader  = PSRCASMain(vs_in);
    }
};